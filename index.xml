<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>及时当勉励，岁月不待人！@iNuo</title>
    <link>https://xshi000.github.io/</link>
    <description>Recent content on 及时当勉励，岁月不待人！@iNuo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 09 Feb 2021 17:46:42 +0800</lastBuildDate>
    
	<atom:link href="https://xshi000.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>极简Java十八：Oracle数据库</title>
      <link>https://xshi000.github.io/java_18/</link>
      <pubDate>Tue, 09 Feb 2021 17:46:42 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_18/</guid>
      <description>第一章  本章内容  oracle介绍[了解] Oracle安装[了解] Oracle体系结构[理解] 创建表空间[理解] 用户[理解] Oracle数据类型[应用] 表的管理 Scott用户下的表结构[了解] 单行函数[应用] 多行函数（聚合函数） 分组统计 多表查询[应用] 子查询[应用] Rownum与分页查询 [应用]   ​
1.1 oracle介绍[了解] ORACLE 数据库系统是美国ORACLE 公司（甲骨文）提供的以分布式数据库为核心的一组软件产品，是目前最流行的客户/服务器(CLIENT/SERVER)或 B/S 体系结构的数据库之一。比如：SilverStream 就是基于数据库的一种中间件。ORACLE 数据库是目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库它实现了分布式处理功能。但它的所有知识，只要在一种机型上学习了ORACLE 知识，便能在各种类型的机器上使用它。
1.2 Oracle安装[了解]   安装全套Oracle 软件的XP 虚拟机，直接在虚拟机中学习 (推荐使用)
  安装到本地电脑
  1.3 Oracle体系结构[理解] ​ 1. 数据库 Oracle 数据库是数据的物理存储，包括（数据文件ORA/DBF、控制文件、联机日志、参数文件）。
Oracle 数据库的概念和其它数据库不一样，这里的数据库是一个操作系统，只有一个库。可以看作是Oracle 就只有一个大数据库，它是以用户为一个单位的，而其它的是以数据库为一个单位！
2. 实例 一个Oracle 实例(Oracle Instance)有一系列的后台进程(Backguound Processes)和内存结构(Memory tructures)组成。一个数据库可以有n 个实例。
3. 用户 用户是在实例下建立的。不同实例可以建相同名字的用户。
4. 表空间 表空间是Oracle 对物理数据库上相关数据文件（ORA/DBF 文件）的逻辑映射。</description>
    </item>
    
    <item>
      <title>极简Java十七：SpringMvc框架</title>
      <link>https://xshi000.github.io/java_17/</link>
      <pubDate>Mon, 08 Feb 2021 23:00:02 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_17/</guid>
      <description>第一章  本章内容  三层架构和MVC模型 SpringMVC的入门案例 请求参数的绑定 常用的注解   1.1 三层架构和MVC模型 三层架构   咱们开发服务器端程序，一般都基于两种形式，一种C/S架构程序，一种B/S架构程序
  使用Java语言基本上都是开发B/S架构的程序，B/S架构又分成了三层架构
  三层架构
表现层：WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型
业务层：SERVICE层，处理公司具体的业务逻辑的
持久层：DAO层，用来操作数据库的
  MVC模型 MVC全名是Model View Controller 模型视图控制器，每个部分各司其职。
  Model：数据模型，JavaBean的类，用来进行数据封装。
  View：指JSP、HTML用来展示数据给用户
  Controller：用来接收用户的请求，整个流程的控制器。用来进行数据校验等。
  1.2 SpringMVC的入门案例 SpringMVC概述   是一种基于Java实现的MVC设计模型的请求驱动类型的轻量级WEB框架。
  Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面，Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。
  使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。
  SpringMVC在三层架构中的位置是 表现层框架</description>
    </item>
    
    <item>
      <title>极简Java十六：Spring框架</title>
      <link>https://xshi000.github.io/java_16/</link>
      <pubDate>Sun, 07 Feb 2021 21:52:42 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_16/</guid>
      <description>第一章  本章内容  Spring的概述 Spring入门案例 Spring容器 bean 标签 spring 的依赖注入   1.1 Spring的概述 什么是Spring？ Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架， Spring的核心是：
 控制反转（IoC)） 面向切面（AOP）  为什么学习Spring？  方便解耦，简化开发  Spring就是一个大工厂，可以将所有对象创建和依赖关系维护，交给Spring管理
 AOP编程的支持  Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能
 声明式事务的支持  只需要通过配置就可以完成对事务的管理，而无需手动编程
 方便程序的测试  Spring对Junit4支持，可以通过注解方便的测试Spring程序
 方便集成各种优秀框架  Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz等）的直接支持
 降低JavaEE API的使用难度  Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低
什么是耦合？ 模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)
当数据库的访问方式发生变化时，传统方式耦合性过高，而spring可借助其工厂类实现控制控制反转，降低耦合！
工厂模式解耦 在实际开发中我们可以把三层的对象都使用配置文件配置起来，当启动服务器应用加载的时候， 让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。那么，这个读取配置文件， 创建和获取三层对象的类就是工厂。
工厂类：
/* 创建一个Bean对象的工厂BeanFactory，用它来创建我们的service和dao对象！ 需求： 第一个：需要一个配置文件来配置我们的service和dao 配置的内容：唯一标识=全限定类名（key=value) 第二个：通过读取配置文件中配置的内容，反射创建对象 我的配置文件可以是xml也可以是properties */ public class BeanFactory { //定义一个Properties对象  private static Properties props; //定义一个Map,用于存放我们要创建的对象。我们把它称之为容器  private static Map&amp;lt;String,Object&amp;gt; beans; //使用静态代码块为Properties对象赋值  static { try { //实例化对象  props = new Properties(); //获取properties文件的流对象  InputStream in = BeanFactory.</description>
    </item>
    
    <item>
      <title>极简Java十五：MyBatis框架</title>
      <link>https://xshi000.github.io/java_15/</link>
      <pubDate>Sat, 06 Feb 2021 22:46:12 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_15/</guid>
      <description>第一章  本章内容  Mybatis介绍 Mybatis框架 Mybatis入门案例   什么是框架？   是一个应用程序的半成品
  提供可重用的公共结构
  按一定规则组织的一组组件
  例：写简历，使用模板不用考虑布局、排版等，提高效率，可专心在简历内容上，结构统一，便于人事阅读，新手也可以作出专业的简历。
使用框架的好处   不用再考虑公共问题
  专心在业务实现上
  结构统一，易于学习、维护
  新手也可写出好程序
  主流框架：  SSH：Spring + Strucs2 + Hibernate SSM：Spring + SpringMVC + Mybatis  1.1 Mybatis介绍 MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。
Jdbc的问题： Sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。
public static void main(String[] args) { Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; try { //加载数据库驱动  Class.</description>
    </item>
    
    <item>
      <title>极简Java十四：Maven入门</title>
      <link>https://xshi000.github.io/java_14/</link>
      <pubDate>Fri, 05 Feb 2021 19:05:26 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_14/</guid>
      <description>第一章  本章内容  maven介绍 maven安装 maven仓库 入门程序 概念模型 项目构建 依赖&amp;amp;插件 断点调试 分模块构建工程   1. maven介绍 maven是什么？ ​ maven翻译为“专家”，“内行”。Maven是Apache下的一个纯java开发的开源项目，它是一个项目管理工具，使用maven对java项目进行【项目构建】和【依赖管理】。当前使用Maven的项目在持续增长。
什么是项目构建？ ​ 项目构建是一个项目从编写源代码到编译、测试、运行、打包、部署、运行的过程！
传统项目构建过程 ​ 传统构建项目的过程如下：
构建过程如下：
​ 1）在idea中创建一个java web工程
​ 2）在工程中编写源代码及配置文件等
​ 3）对源代码进行编译，java文件编译成class文件
​ 4）执行Junit单元测试
​ 5）将工程打成war包部署至tomcat运行
maven项目构建过程 ​ maven将项目构建的过程进行标准化，每个阶段使用一个命令完成，下图展示了构建过程的一些阶段，后面章节详细介绍每个阶段，这里先大概了解下：
上图中部分阶段对应命令如下：
清理阶段对应maven的命令是clean，清理输出的class文件
编译阶段对应maven的命令是compile，将java代码编译成class文件。
打包阶段对应maven的命令是package，java工程可以打成jar包，web工程可以打成war包
运行一个maven工程（web工程）需要一个命令：tomcat:run
maven工程构建的优点：
​	1、一个命令完成构建、运行，方便快捷。
​	2、maven对每个构建阶段进行规范，非常有利于大型团队协作开发。
什么是依赖管理? ​ 什么是依赖？一个java项目可能要使用一些第三方的jar包才可以运行，那么我们说这个java项目依赖了这些第三方的jar包。举个例子：一个crm系统，它使用的是mysql数据库，所以需要依赖mysql的jar包。
​ 什么是依赖管理？就是对项目所有依赖的jar包进行规范化管理。
传统项目的依赖管理 ​ 传统的项目工程要管理所依赖的jar包完全靠人工进行，程序员从网上下载jar包添加到项目工程中，程序员手工将mysql的jar添加到工程中的WEB-INF/lib目录下。
手工拷贝jar包添加到工程中的问题是：
​	1、没有对jar包的版本统一管理，容易导致版本冲突。
​	2、从网上找jar包非常不方便，有些jar找不到。
​	3、jar包添加到工程中导致工程过大。
maven项目的依赖管理 ​ maven项目管理所依赖的jar包不需要手动向工程添加jar包，只需要在pom.xml（maven工程的配置文件）添加jar包的坐标，自动从maven仓库中下载jar包、运行！</description>
    </item>
    
    <item>
      <title>极简Java十三：JavaWeb</title>
      <link>https://xshi000.github.io/java_13/</link>
      <pubDate>Thu, 04 Feb 2021 23:07:13 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_13/</guid>
      <description>第一章  本章内容  XML语法 XML约束 XML解析   什么是XML？可扩展标记语言！
  语法和HTML类似
  标签可由用户自定义
  用来存储数据
  用来传递数据
  用来做配置文件
  1.1 XML语法 XML文档声明：   文档声明必须以&amp;lt;?xml开头，以?&amp;gt;结束！
  文档声明必须从文档的第0行第0列开始！
  文档声明属性：
a) version：指定xml文档版本（必须）
b) encoding：文档编码（可选默认utf-8）
  &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; 元素：   元素是XML文档组成最重要的部分
  普通元素由开始标签，元素体，结束标签组成
  元素命名：
a)区分大小写
b)不能使用空格，不能使用冒号:
  必须有根元素
  &amp;lt;Student&amp;gt; &amp;lt;name&amp;gt;&amp;lt;/name&amp;gt; &amp;lt;age&amp;gt;&amp;lt;/age&amp;gt; &amp;lt;sex&amp;gt;&amp;lt;/sex&amp;gt; &amp;lt;/student&amp;gt; 属性：   属性是元素的一部分，必须出现在元素开始标签</description>
    </item>
    
    <item>
      <title>极简Java十二：Bootstrap入门</title>
      <link>https://xshi000.github.io/java_12/</link>
      <pubDate>Sun, 31 Jan 2021 12:00:17 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_12/</guid>
      <description>第一章  本章内容  Bootstrap   什么是Bootstrap？ Bootstrap 是一个用于快速开发 Web 应用程序和网站的前端框架。Bootstrap 基于 HTML、CSS、JavaScript。
历史: Bootstrap 是由 Twitter 的 Mark Otto 和 Jacob Thornton 开发的。Bootstrap 是 2011 年八月在 GitHub 上发布的开源产品。
为什么使用Bootstrap？   移动设备优先：自 Bootstrap 3 起，框架包含了贯穿于整个库的移动设备优先的样式。
  浏览器支持：所有的主流浏览器都支持 Bootstrap。
  容易上手：只要您具备 HTML 和 CSS 的基础知识，您就可以开始学习 Bootstrap。
  响应式设计：Bootstrap 的响应式 CSS 能够自适应于台式机、平板电脑和手机。
  Bootstrap包含的内容   基本结构：Bootstrap 提供了一个带有网格系统、链接样式、背景的基本结构。
  CSS：Bootstrap 自带以下特性：全局的 CSS 设置、定义基本的 HTML 元素样式、可扩展的 class，以及一个先进的网格系统。</description>
    </item>
    
    <item>
      <title>极简Java十一：JavaScript与jQuery</title>
      <link>https://xshi000.github.io/java_11/</link>
      <pubDate>Sat, 30 Jan 2021 12:26:39 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_11/</guid>
      <description>第一章  本章内容  Js介绍 JavaScript核心语法   1.1 Js介绍 什么是JavaScript 客户端的脚本语言，它是一门解释性语言，边执行边解释
功能：向HTML页面中添加交互行为
为什么要学JavaScript： 表单验证－减轻服务器端压力
页面动态效果
JavaScript的基本结构 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;JavaScript的基本结构&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; document.write(&amp;#34;hello,JavaScript&amp;#34;); &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; alert(&amp;#34;初学JavaScript!&amp;#34;); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;script&amp;gt;…&amp;lt;/script&amp;gt;可以包含在文档中的任何地方，只要保证这些代码在被使用前已读取并加载到内存即可
JavaScript的执行原理 JavaScript的书写位置  写在行内  &amp;lt;input type=&amp;#34;button&amp;#34; value=&amp;#34;按钮&amp;#34; onclick=&amp;#34;alert(&amp;#39;Hello World&amp;#39;)&amp;#34; /&amp;gt;  写在script标签中  &amp;lt;head&amp;gt; &amp;lt;script&amp;gt; alert(&amp;#39;Hello World!&amp;#39;); &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt;  写在外部js文件中，在页面引入  &amp;lt;script src=&amp;#34;main.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 1.2 JavaScript核心语法： 变量 var声明变量
var age; age = 18; 同时声明多个变量并赋值</description>
    </item>
    
    <item>
      <title>极简Java十：HTML5和CSS3</title>
      <link>https://xshi000.github.io/java_10/</link>
      <pubDate>Fri, 29 Jan 2021 10:41:15 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_10/</guid>
      <description>第一章  本章内容  html   为什么要学习HTML？ 制作精美的电商、门户等静态网页
什么是HTML   HTML：超文本标记语言（Hyper Text Markup Language）
  HTML不是一种编程语言，而是一种标记语言，描述网页的语言
  HTML使用标签描述网页中图片、文本、音乐、视频、超链接等
  HTML基本标签    名称 标签 示例     标题标签 &amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt; &amp;lt;h1&amp;gt;静夜思&amp;lt;/h1&amp;gt;   段落和换行标签 &amp;lt;p&amp;gt;…&amp;lt;/p&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;p&amp;gt;床前明月光疑是地上霜&amp;lt;/p&amp;gt;   水平线标签 &amp;lt;hr/&amp;gt; &amp;lt;hr/&amp;gt;   斜体 &amp;lt;em&amp;gt;…&amp;lt;/em&amp;gt; 举头望明月   字体加粗 &amp;lt;strong&amp;gt;…&amp;lt;/strong&amp;gt; 低头思故乡    &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh-cn&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;静夜思&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;静夜思&amp;lt;/h1&amp;gt; &amp;lt;hr/&amp;gt; &amp;lt;p&amp;gt; 床前明月光&amp;lt;br/&amp;gt; 疑是地上霜&amp;lt;br/&amp;gt; &amp;lt;em&amp;gt;举头望明月&amp;lt;/em&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;strong&amp;gt;低头思故乡&amp;lt;/strong&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 图像标签: 常见图片格式：jpg、gif、bmp、png</description>
    </item>
    
    <item>
      <title>极简Java九：JDBC与连接池</title>
      <link>https://xshi000.github.io/java_9/</link>
      <pubDate>Wed, 27 Jan 2021 21:52:55 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_9/</guid>
      <description>第一章  本章内容  学习目标 JDBC 入门 DriverManager 类 Connection 接口 Statement 接口 数据库工具类 JdbcUtils PreparedStatement 接口 JDBC 事务的处理   1.1 学习目标 ​	1) 能够理解 JDBC 的概念
​	2) 能够使用 DriverManager 类
​	3) 能够使用 Connection 接口
​	4) 能够使用 Statement 接口
​	5) 能够使用 ResultSet 接口
​	6) 能够说出 SQL 注入原因和解决方案
​	7) 能够通过 PreparedStatement 完成增、删、改、查
​	8) 能够完成 PreparedStatement 改造登录案例
1.2 JDBC 入门 客户端操作 MySQL 数据库的方式： ​	1) 使用第三方客户端来访问 MySQL：SQLyog、Navicat、SQLWave、MyDB Studio、EMS SQL Manager for MySQL</description>
    </item>
    
    <item>
      <title>极简Java八：MySql数据库</title>
      <link>https://xshi000.github.io/java_8/</link>
      <pubDate>Tue, 26 Jan 2021 22:35:15 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_8/</guid>
      <description>第一章  本章内容  学习目标 数据库的介绍 数据库的安装与卸载 数据库服务的启动与登录 SQL 的概念 DDL 操作数据库 DDL 操作表结构 DML 操作表中的数据 DQL 查询表中的数据   1.1 学习目标   能够理解数据库的概念
  能够安装 MySQL 数据库
  能够启动,关闭及登录 MySQL
  能够使用 SQL 语句操作数据库
  能够使用 SQL 语句操作表结构
  能够使用 SQL 语句进行数据的添加修改和删除的操作
  能够使用 SQL 语句简单查询数据
  1.2 数据库的介绍 数据库概述 数据的存储方式
  Java 中创建对象： Student s = new Student(1, &amp;ldquo;张三&amp;rdquo;) 存在内存中</description>
    </item>
    
    <item>
      <title>极简Java七：多线程与网络编程</title>
      <link>https://xshi000.github.io/java_7/</link>
      <pubDate>Sun, 24 Jan 2021 22:51:39 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_7/</guid>
      <description>第一章  本章内容  多线程 线程安全 线程状态   1.1 多线程 现在想要设计一个程序，边打游戏边听歌，怎么设计？
要解决上述问题,咱们得使用多进程或者多线程来解决.
并发与并行   并行：指两个或多个事件在同一时刻发生（同时发生）。
  并发：指两个或多个事件在同一个时间段内发生。
  线程与进程   进程：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。
  线程：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。
  简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程
我们可以在电脑底部任务栏，右键&amp;gt;打开任务管理器,可以查看当前任务的进程：
进程
线程：
调度方式   分时调度：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。
  抢占式调度：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。
  其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。
主线程 回想我们以前学习中写过的代码，当我们在dos命令行中输入java空格类名回车后，启动JVM，并且加载对应的class文件。虚拟机并会从main方法开始执行我们的程序代码，一直把main方法的代码执行结束。如果在执行过程遇到循环时间比较长的代码，那么在循环之后的其他代码是不会被马上执行的。如下代码演示：
public class A_Thread { void show() { for (int i=1;i&amp;lt;=10000 ;i++ ) { System.out.println(&amp;#34;i=&amp;#34;+i); } } } public class A_MainThread { public static void main(String[] args) { A_Thread t=new A_Thread(); t.</description>
    </item>
    
    <item>
      <title>极简Java六：反射注解</title>
      <link>https://xshi000.github.io/java_6/</link>
      <pubDate>Sat, 23 Jan 2021 18:32:01 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_6/</guid>
      <description>第一章  本章内容  反射   1.1 反射 JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。
要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法！所以先要获取到每一个字节码文件对应的Class类型的对象。
Class类 获取Class对象的三种方式
 方式一: 通过Object类中的getObject()方法  Person p = new Person(); Class c = p.getClass();  方式二: 通过 类名.class 获取到字节码文件对象（任意数据类型都具备一个class静态属性,看上去要比第一种方式简单）。  Class c2 = Person.class;  方式三: 通过Class类中的方法（将类名作为字符串传递给Class类中的静态方法forName即可）。  Class c3 = Class.forName(&amp;#34;Person&amp;#34;); 注意：第三种和前两种的区别
 前两种你必须明确Person类型； 第三种是指定这种类型的字符串就行，这种扩展更强！我不需要知道你的类，我只提供字符串，按照配置文件加载就可以了  代码演示：
/* \ 获取.class字节码文件对象的方式 \ 1：通过Object类中的getObject()方法 \ 2: 通过 类名.class 获取到字节码文件对象 \ 3: 反射中的方法, \public static Class&amp;lt;?&amp;gt; forName(String className) throws ClassNotFoundException \返回与带有给定字符串名的类或接口相关联的 Class 对象 */ public class ReflectDemoReflect { public static void main(String[] args) throws ClassNotFoundException { // 1： 通过Object类中的getObject()方法  // Person p1 = new Person();  // Class c1 = p1.</description>
    </item>
    
    <item>
      <title>极简Java五：IO流</title>
      <link>https://xshi000.github.io/java_5/</link>
      <pubDate>Fri, 22 Jan 2021 21:06:57 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_5/</guid>
      <description>第一章  本章内容  递归 File类 FileInputStream FileOutputStream   1.1 递归 递归的概述 递归，指在当前方法内调用自己的这种现象！
public class DemoStack { public static void main(String[] args) { method(); } public static void method(){ System.out.println(&amp;#34;递归的演示&amp;#34;); //在当前方法内调用自己  method(); } }   递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。
  在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。
  public class DemoDigui { public static void main(String[] args) { test(1); } public static void test(int i){ System.out.println(i); if(i==10000){ return; } test(++i); } } 递归的代码演示，计算1-n之间的和，使用递归完成</description>
    </item>
    
    <item>
      <title>极简Java四：集合框架</title>
      <link>https://xshi000.github.io/java_4/</link>
      <pubDate>Thu, 21 Jan 2021 18:39:14 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_4/</guid>
      <description>第一章  本章内容  集合接口介绍 集合遍历   集合概述 （1）集合是存储其他对象的特殊对象，可以将集合当做一个容器
（2）集合的相关接口和类位于java.util包中
（3）集合中的接口和类是一个整体、一个体系，整个体系称为集合框架
集合与数组的相同点和不同点：   数组的长度是固定的，集合的长度可以变化
  集合中存储的元素必须是引用类型数据
  1.1 集合接口介绍 集合框架定义了一些接口，它们决定了集合类的本质特性。具体的集合类只是提供了标准接口的不同实现。
Collection接口    方 法 描 述     * boolean add(E obj) 将obj添加到调用集合。   boolean addAll(Collection&amp;lt;? extends E&amp;gt; c) 将c中的所有元素添加到调用集合中。   * boolean remove(Object obj) 从调用集合中删除obj的一个实例。   boolean removeAll(Collection&amp;lt;?&amp;gt; c) 从调用集合中删除c的所有元素。   * void clear() 删除调用集合中的所有元素   * boolean contains(Object obj) 如果obj是调用集合的元素，则返回true。   * boolean isEmpty() 如果调用集合为空，则返回true。   * int size() 返回调用集合中元素的数量   * Iteratoriterator() 返回调用集合的一个迭代器   containAll(Collection c)     List接口 List（列表）：表示有序、元素可以重复的集合。</description>
    </item>
    
    <item>
      <title>极简Java三：Object类与常用API</title>
      <link>https://xshi000.github.io/java_3/</link>
      <pubDate>Wed, 20 Jan 2021 17:39:52 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_3/</guid>
      <description>第一章  本章内容  Object类   1.1 Object类概述 java.lang.Object类是Java语言中的根类，即所有类的父类。它的所有方法子类都可以使用。
如果一个类没有特别指定父类， 那么默认则继承自Object类。例如：
public class Person extends Object { ... } 根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。今天我们主要学习其中的2个：
  public String toString()：返回该对象的字符串表示
  public boolean equals(Object obj)：指示其他某个对象是否与此对象“相等”
  toString方法 方法摘要  public String toString()：返回该对象的字符串表示。  toString方法返回该对象的字符串表示，其实该字符串内容就是对象的类型+@+内存地址值。
由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。
覆盖重写 如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：
public class Person { private String name; private int age; @Override public String toString() { return &amp;#34;Person{&amp;#34; + &amp;#34;name=&amp;#39;&amp;#34; + name + &amp;#39;\&amp;#39;&amp;#39; + &amp;#34;, age=&amp;#34; + age + &amp;#39;}&amp;#39;; } // 省略构造器与Getter Setter  } public class Test { public static void main(String[] args) { Person p=new Person(&amp;#34;iNuo&amp;#34;,23); //重写toString方法运行结果  System.</description>
    </item>
    
    <item>
      <title>极简Java二：面对对象</title>
      <link>https://xshi000.github.io/java_2/</link>
      <pubDate>Sun, 17 Jan 2021 18:02:46 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_2/</guid>
      <description>第一章  本章内容  类和对象   理解什么是面向过程、面向对象 面向过程与面向对象都是我们编程中，编写程序的一种思维方式。
  面向过程的程序设计方式，是解决一个问题，先思考“我该怎么做”，然后一步步实现的过程。
  面向对象的程序设计方式，是解决一个问题先找出里面涉及的事物，然后通过事物之间的交互来完成。
面向对象思维方式是一种更符合人们思考习惯的思想
  例：买砖戒
对象在代码中的体现 描述小汽车。
分析：
事物的特点（属性）： 颜色。 轮胎个数。 事物的(功能)： 运行。 发现：事物其实就是由特点（属性）和行为（功能）组成的。
属性用变量表示，行为功能用方法表示
小汽车 { 颜色； 轮胎个数； 运行() { } } 通过计算机语言Java来描述这个事物。
 定义类的格式  public class 类名 { //可编写0至n个属性  数据类型 变量名1； 数据类型 变量名2； //可编写0至n个方法  修饰符 返回值类型 方法名(参数){ 执行语句; } }  汽车类  public class Car { String color; int number; void run() { System.</description>
    </item>
    
    <item>
      <title>极简Java一：Java基础</title>
      <link>https://xshi000.github.io/java_1/</link>
      <pubDate>Sat, 19 Dec 2020 12:28:44 +0800</pubDate>
      
      <guid>https://xshi000.github.io/java_1/</guid>
      <description>第一章  本章内容：   Java技术体系
  二进制和十进制转换
  常用dos命令
  Java程序开发流程
  常用快捷键
  使用Api文档
  反编译工具
   1.1 Java的诞生与发展历史 Java是Sun于1995年推出的高级编程语言，2009年被oracle收购。
计算机语言就是能被计算机理解并执行的指令。
Java发展历史中的版本 1995年Sun公司发布Java1.0版本 1997年发布Java 1.1版本 1998年发布Java 1.2版本 2000年发布Java 1.3版本 2002年发布Java 1.4版本 2004年发布Java 1.5版本 2006年发布Java 1.6版本 2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java 1.7版本 2014年发布Java 1.8版本 2017年发布Java 9.0版本
1.2 Java技术体系 Java技术分为三个体系：
  Java SE（J2SE - Platform Standard Edition，java平台标准版）它是学习Java EE的基础
  Java EE（J2EE - Java 2 Platform,Enterprise Edition，java平台企业版）开发面向Internet的应用程序 Java Web</description>
    </item>
    
    <item>
      <title>论文写作技巧</title>
      <link>https://xshi000.github.io/write/</link>
      <pubDate>Tue, 29 Sep 2020 22:03:41 +0800</pubDate>
      
      <guid>https://xshi000.github.io/write/</guid>
      <description>1.降重 代码降重    代码加注释
  批量改变量（Ctrl+F 查找）改为全称/简称
  添加透明字符，普通字符变小变白
  代码变图片（需pdf软件转换）
   文本降重    文本添加到公式框内，即文字转变为图片
  算法流程转流程图，常用，降重并且简洁
   2.三线表？    去除所有格式，边框：无框线
  添加上下框线，较粗一点
  选定第一行，添加下框线，线条正常粗细
      字体格式问题：中文（宋体，小四） 英文&amp;amp;数字（Time New Romance）
  表格公式占位宽问题：段落，取消勾选两个勾
  表名问题：表上图下（图不用带标题）字体小一号；表标题上一行文字，进入段落，设置段后（0.5行）
  表标题：加粗，大小与正文一致
  打印与预览 可看最终效果！
   3.公式上浮？  对于段落中的公式上浮问题：</description>
    </item>
    
    <item>
      <title>DBSCAN聚类算法流程图</title>
      <link>https://xshi000.github.io/dbscan/</link>
      <pubDate>Tue, 29 Sep 2020 22:02:40 +0800</pubDate>
      
      <guid>https://xshi000.github.io/dbscan/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>python进阶思维导图</title>
      <link>https://xshi000.github.io/pymendpic/</link>
      <pubDate>Tue, 29 Sep 2020 22:01:42 +0800</pubDate>
      
      <guid>https://xshi000.github.io/pymendpic/</guid>
      <description>1. 数据交换格式 2. 数据库编程 3. 网络编程 4. wxPython图形用户界面编程 5. 多线程编程 6. 网络爬虫 7. 数据可视化 8. 宠物商店项目 9. QQ聊天工具 ​</description>
    </item>
    
    <item>
      <title>Python项目：pygame游戏开发之飞机大战</title>
      <link>https://xshi000.github.io/pygame/</link>
      <pubDate>Tue, 29 Sep 2020 22:00:56 +0800</pubDate>
      
      <guid>https://xshi000.github.io/pygame/</guid>
      <description>第一章、编写pygame HelloWorld程序 1. 搭建开发环境
 Python 、集成开发环境PyCharm 、用于游戏开发的第三方库pygame
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pygame //指定下载路径
 2. HelloWorld程序的运行效果和实现步骤
 实现步骤：
1、创建并显示一个固定尺寸的窗口
2、处理用户关闭窗口从而退出程序的事件
3、设置窗口的标题和背景色
4、在窗口的底部居中位置绘制一架飞机
5、让飞机向上匀速移动
 3. HelloWorld1创建并显示一个固定尺寸的窗口
 创建项目PlaneWar
添加Main.py
导入pygame-初始化-调用pygame.display.set_mode()
编写游戏运行函数run_game()-调用
 4. HelloWorld2处理用户关闭窗口以退出程序的事件
 Main：
While循环等待关闭事件触发，卸载pygame库，退出程序（sys库）
 5. HelloWorld3设置窗体的标题和背景色
 标题：调用pygame.display.set_caption()
图标：加载图片-设置set_icon（）
背景色：接收窗体对象为window-调用fill（）—刷新flip（）
 6. HelloWorld4绘制飞机
 新建Directory-导入飞机图片
Main，加载图片pygame.image.load（）赋予my_plane
窗体中，绘制window.blit（）
窗口坐标系：左上角为坐标原点，右向为X轴，下向为Y轴
本例：窗口（500，700） 飞机（102，126）
飞机的初始位置：X=（500-102）/2 Y=700-126 即（199，574）
 7. HelloWorld5飞机移动
 游戏开发帧率至少30帧/秒，常规60帧/秒，75以上，无法分辨！
时间测试：导入datetime，开始、结束时间打点datetime.datetime.now()，相减
创建时钟对象clock-设置动画最大帧率clock.tick(30)
飞机移动过程，只Y改变，抽取Y为pos_y 并替换初始位置的Y坐标
将绘制飞机和刷新置于while中，并将Y坐标作为循环变量，减少一个值
将绘制背景颜色置于while中，绘制飞机之前！（消除残影）</description>
    </item>
    
    <item>
      <title>C#项目：学员信息管理系统</title>
      <link>https://xshi000.github.io/cshape/</link>
      <pubDate>Tue, 29 Sep 2020 21:59:56 +0800</pubDate>
      
      <guid>https://xshi000.github.io/cshape/</guid>
      <description>0.项目总体概述 功能模块
   学员管理系统               系统 学员管理 成绩管理 考勤管理 帮助         秘密修改 退出系统 添加学员 信息打印 学员管理 成绩分析 快速查询 考勤打卡 考勤查询 在线帮助 联系我们    项目数据库
学员表 &amp;amp; 成绩表 &amp;amp; 班级表 管理员表 项目框架设计（典型两层设计）
   UI 应用程序层（界面）     Models 实体层(数据封装与传递)   DAL 数据访问层   数据库     1.</description>
    </item>
    
    <item>
      <title>T-SQL</title>
      <link>https://xshi000.github.io/sql/</link>
      <pubDate>Tue, 29 Sep 2020 21:59:39 +0800</pubDate>
      
      <guid>https://xshi000.github.io/sql/</guid>
      <description>新建数据库
create database TestDB; 使用数据库
use TestDB; //跳转到指定数据库 新建表
create table Student( Id int primary key identity(1831301,1), --编号 整数 主键 标识列（种子，增量 ） Names nvarchar(30) not null, --姓名 字符 非空 Gender char(2) not null, --性别 字符 非空 Age int not null, --年龄 整数 非空 Adress nvarchar(50) default(&#39;湖北武汉&#39;),--地址 字符 默认值（湖北武汉）	Score float check(Score&amp;gt;=0 and Score&amp;lt;=100) not null --分数 小数 check约束（0~100之间) 非空 ); //查 --查询数据库表Student里的所有信息 select * from Student; //改 update Student set Major=4 where Major=2; //删 delete from Student where Number=1831304; //增 insert into Student (Names,Gender,Age,Adress,Score) values (&#39;李荣浩&#39;,&#39;男&#39;,18,default,88); 删除表</description>
    </item>
    
    <item>
      <title>ADO.NET</title>
      <link>https://xshi000.github.io/ado/</link>
      <pubDate>Tue, 29 Sep 2020 21:59:21 +0800</pubDate>
      
      <guid>https://xshi000.github.io/ado/</guid>
      <description>ADO.NET是数据库访问的方法和技术
ADO.NET由两部分组成：DataSet（数据集）和.NET Framework数据提供程序
  DataSet数据集——能临时保存各种类型数据库中的数据；
  .Net framework数据提供程序——它由几个组件组成，分别负责连接、操作和访问数据库，其中负责访问数据的组件是只读只进式的，也就是只读不修改、只能往前读不能后退
  ADO.NET主要通过以下对象操作数据库：
  Connection对象，负责连接数据库。
  Command对象，对数据库进行增删改的操作。
  Datareader对象，读取数据（只读只进）。
  DataAdapter对象，从数据库获取对象后填充给DataSet临时数据库。
  使用connection对象的步骤
示例1
private void button1_Click(object sender, EventArgs e) { //1.创建链接对象 SqlConnection con = new SqlConnection(); //2.给对象添加属性 con.ConnectionString = &amp;quot;data source=.; initial catalog=TestDB; integrated security=true&amp;quot;; try //将可能出现异常的代码，放在try里 { //3.打开数据库连接 con.Open(); MessageBox.Show(&amp;quot;打开数据库连接成功&amp;quot;); } catch (Exception ex)//如果出现异常，则允许catch里的代码 { MessageBox.Show(ex.Message);//以消息框形式，输出异常消息 } finally //不管程序错误与否，都会执行的代码 { con.Close(); MessageBox.Show(&amp;quot;关闭数据库连接成功&amp;quot;); } } 使用Command对象</description>
    </item>
    
    <item>
      <title>Excel-图表模板大法</title>
      <link>https://xshi000.github.io/excel2/</link>
      <pubDate>Tue, 29 Sep 2020 21:14:31 +0800</pubDate>
      
      <guid>https://xshi000.github.io/excel2/</guid>
      <description>主题颜色 经济学人主题色 水蓝系
商业周刊主题色 黑标系
华尔街时报主题色 茶色系
Think-cell主题色 咨询风
金融日报主题色 粉色系
第一财经周报主题色 奶色系
颜色主题库位置：C:\Users\iNuo\AppData\Roaming\Microsoft\Templates\Document Themes\Theme Colors
图表模板 经济学人图表模板 水蓝系
商业周刊图表模板 黑标系
华尔街时报图表模板 茶色系
Think-cell图表模板 咨询风
金融日报图表模板 粉色系
第一财经周报图表模板 奶色系
图表模板库位置：C:\Users\iNuo\AppData\Roaming\Microsoft\Templates\Charts
操作技巧 一键出图
在图表模板中，选中某一模板，右键，设置为默认图表即可！
按Alt+F1，瞬间出图！
Office通用
在Word和PPT中，同样可以调出模板，直接出图！</description>
    </item>
    
    <item>
      <title>向《经济学人》学图表</title>
      <link>https://xshi000.github.io/excel/</link>
      <pubDate>Mon, 28 Sep 2020 22:26:11 +0800</pubDate>
      
      <guid>https://xshi000.github.io/excel/</guid>
      <description>图表规范 经济学人主题 结合以上规范及图表对比，进一步设置自己Excel的主题
结合设置好的Excel主题，完成一次模拟
利用单元格作图
自我风格 基础图表 </description>
    </item>
    
    <item>
      <title>数学建模算法汇总</title>
      <link>https://xshi000.github.io/mm/</link>
      <pubDate>Mon, 28 Sep 2020 21:03:24 +0800</pubDate>
      
      <guid>https://xshi000.github.io/mm/</guid>
      <description>评价类问题：层次分析法、优劣解距离法、模糊综合评价法、灰色关联分析等
预测类问题：拟合、回归、灰色预测、时间序列预测、神经网络预测等
优化类问题：非线性规划、整数规划、模拟退火、遗传算法等
   算法 应用 特点 步骤     层次分析法 评价类问题 无数据，主观性强 1.建立系统的递阶层次结构；2. 构造判断矩阵；3. 计算权重并一致性检验；4 . 计算得分，并进行排序。   优劣解距离法 综合评价 有数据，客观 1.将原始矩阵正向化；2.正向化矩阵标准化；3.计算得分并归一化。   灰色关联分析 系统分析、综合评价 基于曲线形状的相似程度 1.画统计图；2.确定分析数列；3.变量预处理；4.计算关联系数；5.计算灰色关联度。   模糊综合评价 综合评价 把论域中的对象对应评语集中一个评语；将方案作为评语集并选择一个最优方案 1.确定因素集；2.确定评语集；3.确定各因素的权重；4.确定模糊综合判断矩阵；5.综合评判。         插值 补充数据、短期预测 数据量少/缺少数据 常用：三次埃尔米特插值；三次样条插值。   拟合 拟合曲线、数据预测 一条确定的曲线 最小化损失函数 VS拟合函数尽可能简单   时间序列分析 描述过去、分析规律、预测未来 时间序列分解、指数平滑模型(7种)、ARIMA/SARIMA模型 扩展：ARCH/GARCH模型   预测 预测 灰色预测-GM模型、神经网络-nftool ①作时序图，分析趋势；②拆分数据集，挑选模型；指数平滑/ARIMA/灰色预测/神经网络等；指标：SSE③建模预测；④做时序图（预测前后）。         相关系数 变量间的相关性 衡量线性相关程度、spss应用、相关系数 + 显著性、皮尔逊&amp;amp;斯皮尔曼相关系数 先画散点图确定线性关系再求解线性相关系数比较；计算相关系数并假设检验；前提：服从正太分布；(JB检验/威尔克检验/QQ图)；扩展：正态分布均值假设检验。   典型相关分析 两组变量的相关性 基本思想：与主成分分析相似找代表(变量的线性组合) 1.</description>
    </item>
    
    <item>
      <title>Anaconda 那些事</title>
      <link>https://xshi000.github.io/anaconda/</link>
      <pubDate>Mon, 20 Jul 2020 15:32:46 +0800</pubDate>
      
      <guid>https://xshi000.github.io/anaconda/</guid>
      <description>【声明】本篇博客为个人笔记整理，笔记来源各个技术博客/书籍/个人编撰，如有侵权，必删之！
快速访问区    描述 操作     Py库 https://www.lfd.uci.edu/~gohlke/pythonlibs/   路径 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pygame   超时 pip &amp;ndash;default-timeout=100 install tensorflow   镜像    清华 https://pypi.tuna.tsinghua.edu.cn/simple   豆瓣 https://pypi.douban.com/simple    ​
手动安装python包  有时候，pip安装python包会失败，提示 “未找到和环境相匹配的包”！此时，可以试试手动安装。
操作流程如下：
 首先，在py库 https://www.lfd.uci.edu/~gohlke/pythonlibs/ 中，下载安装包 然后，解包后，放到 Lib-&amp;gt;site-packages 下面（site-packages放第三方包） 最后，在包目录下有个setup.py，需要在这个目录下打开命令行，运行 “ python setup.py install ” 完成编译。这样就完成安装了。   Python  一种面向对象的解释型计算机程序设计语言
 python环境  一个解释器和一个包集合.</description>
    </item>
    
  </channel>
</rss>